
class Pair{
    int node;
    int parent;
    Pair(int node , int parent)
    {
        this.node = node;
        this.parent = parent;
    }
}
class Solution {
    public boolean dfs(int src , int parent ,  ArrayList<ArrayList<Integer>> adj ,boolean []vis)
    {
        vis[src] = true;
        for(int i : adj.get(src))
        {
            if(i == parent) continue;
            if(vis[i] == true) return true;
            else{
                if(dfs(i,src,adj,vis)) return true;
            }
        }
        return false;
    }
    
    public boolean bfs(int src ,int parent ,  ArrayList<ArrayList<Integer>> adj ,boolean []vis)
    {
        Queue<Pair> q = new ArrayDeque<>();
        q.add(new Pair(src,parent));
        while(q.size()>0)
        {
            Pair top = q.remove();
            int node = top.node;
            int p = top.parent;
            vis[node] = true;
            for(int i : adj.get(node))
            {
                if(vis[i] == false)
                {
                    q.add(new Pair(i,node));
                }
                else if(i!=p)
                {
                    return true;
                }
            }
        }
        return false;
    }
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean []vis = new boolean[V];
        for(int i = 0 ; i < V ; i++)
        {
            if(!vis[i] && bfs(i,-1,adj,vis)) return true;
        }
        return false;
    }
}