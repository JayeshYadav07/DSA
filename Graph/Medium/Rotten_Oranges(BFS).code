class Pair {
    int row;
    int col;

    Pair(int row, int col) {
        this.row = row;
        this.col = col;
    }
}

class Solution {
    public int orangesRotting(int[][] grid) {
        // Breadth first search will work here to rotten array
        Queue<Pair> q = new ArrayDeque<>();
        int n = grid.length;
        int m = grid[0].length;

        // adding all the position of rotten orange
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 2) {
                    q.add(new Pair(i, j));
                }
            }
        }

        int time = 0;
        while (q.size() > 0) {
            // make all the orange rotten for curr time
            time++;
            // run all level at same time
            int count = q.size();
            while (count > 0) {
                Pair curr = q.remove();
                int r = curr.row;
                int c = curr.col;

                // try to rotten all oranges connected to the curr rotten orange
                if (r - 1 >= 0 && grid[r - 1][c] != 0 && grid[r - 1][c] != 2) {
                    q.add(new Pair(r - 1, c));
                    grid[r - 1][c] = 2;
                }
                ;
                if (r + 1 < n && grid[r + 1][c] != 0 && grid[r + 1][c] != 2) {
                    q.add(new Pair(r + 1, c));
                    grid[r + 1][c] = 2;
                }
                ;
                if (c - 1 >= 0 && grid[r][c - 1] != 0 && grid[r][c - 1] != 2) {
                    q.add(new Pair(r, c - 1));
                    grid[r][c - 1] = 2;
                }
                ;
                if (c + 1 < m && grid[r][c + 1] != 0 && grid[r][c + 1] != 2) {
                    q.add(new Pair(r, c + 1));
                    grid[r][c + 1] = 2;
                }
                ;
                count--;
            }
        }

        // checking is any orange is fresh or not
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == 1) {
                    return -1;
                }
            }
        }

        // time == 0 , means no rotten oranges
        if (time == 0)
            return 0;
        else
            return time - 1;
    }
}